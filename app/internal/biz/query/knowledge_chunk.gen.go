// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ragx/app/internal/biz/entity"
)

func newKnowledgeChunk(db *gorm.DB, opts ...gen.DOOption) knowledgeChunk {
	_knowledgeChunk := knowledgeChunk{}

	_knowledgeChunk.knowledgeChunkDo.UseDB(db, opts...)
	_knowledgeChunk.knowledgeChunkDo.UseModel(&entity.KnowledgeChunk{})

	tableName := _knowledgeChunk.knowledgeChunkDo.TableName()
	_knowledgeChunk.ALL = field.NewAsterisk(tableName)
	_knowledgeChunk.ID = field.NewInt64(tableName, "id")
	_knowledgeChunk.KnowledgeDocID = field.NewInt64(tableName, "knowledge_doc_id")
	_knowledgeChunk.ChunkID = field.NewString(tableName, "chunk_id")
	_knowledgeChunk.Content = field.NewString(tableName, "content")
	_knowledgeChunk.Ext = field.NewString(tableName, "ext")
	_knowledgeChunk.Status = field.NewInt32(tableName, "status")
	_knowledgeChunk.CreatedAt = field.NewTime(tableName, "created_at")
	_knowledgeChunk.UpdatedAt = field.NewTime(tableName, "updated_at")

	_knowledgeChunk.fillFieldMap()

	return _knowledgeChunk
}

type knowledgeChunk struct {
	knowledgeChunkDo

	ALL            field.Asterisk
	ID             field.Int64
	KnowledgeDocID field.Int64
	ChunkID        field.String
	Content        field.String
	Ext            field.String
	Status         field.Int32
	CreatedAt      field.Time
	UpdatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (k knowledgeChunk) Table(newTableName string) *knowledgeChunk {
	k.knowledgeChunkDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k knowledgeChunk) As(alias string) *knowledgeChunk {
	k.knowledgeChunkDo.DO = *(k.knowledgeChunkDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *knowledgeChunk) updateTableName(table string) *knowledgeChunk {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt64(table, "id")
	k.KnowledgeDocID = field.NewInt64(table, "knowledge_doc_id")
	k.ChunkID = field.NewString(table, "chunk_id")
	k.Content = field.NewString(table, "content")
	k.Ext = field.NewString(table, "ext")
	k.Status = field.NewInt32(table, "status")
	k.CreatedAt = field.NewTime(table, "created_at")
	k.UpdatedAt = field.NewTime(table, "updated_at")

	k.fillFieldMap()

	return k
}

func (k *knowledgeChunk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *knowledgeChunk) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 8)
	k.fieldMap["id"] = k.ID
	k.fieldMap["knowledge_doc_id"] = k.KnowledgeDocID
	k.fieldMap["chunk_id"] = k.ChunkID
	k.fieldMap["content"] = k.Content
	k.fieldMap["ext"] = k.Ext
	k.fieldMap["status"] = k.Status
	k.fieldMap["created_at"] = k.CreatedAt
	k.fieldMap["updated_at"] = k.UpdatedAt
}

func (k knowledgeChunk) clone(db *gorm.DB) knowledgeChunk {
	k.knowledgeChunkDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k knowledgeChunk) replaceDB(db *gorm.DB) knowledgeChunk {
	k.knowledgeChunkDo.ReplaceDB(db)
	return k
}

type knowledgeChunkDo struct{ gen.DO }

type IKnowledgeChunkDo interface {
	gen.SubQuery
	Debug() IKnowledgeChunkDo
	WithContext(ctx context.Context) IKnowledgeChunkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKnowledgeChunkDo
	WriteDB() IKnowledgeChunkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKnowledgeChunkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKnowledgeChunkDo
	Not(conds ...gen.Condition) IKnowledgeChunkDo
	Or(conds ...gen.Condition) IKnowledgeChunkDo
	Select(conds ...field.Expr) IKnowledgeChunkDo
	Where(conds ...gen.Condition) IKnowledgeChunkDo
	Order(conds ...field.Expr) IKnowledgeChunkDo
	Distinct(cols ...field.Expr) IKnowledgeChunkDo
	Omit(cols ...field.Expr) IKnowledgeChunkDo
	Join(table schema.Tabler, on ...field.Expr) IKnowledgeChunkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKnowledgeChunkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKnowledgeChunkDo
	Group(cols ...field.Expr) IKnowledgeChunkDo
	Having(conds ...gen.Condition) IKnowledgeChunkDo
	Limit(limit int) IKnowledgeChunkDo
	Offset(offset int) IKnowledgeChunkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKnowledgeChunkDo
	Unscoped() IKnowledgeChunkDo
	Create(values ...*entity.KnowledgeChunk) error
	CreateInBatches(values []*entity.KnowledgeChunk, batchSize int) error
	Save(values ...*entity.KnowledgeChunk) error
	First() (*entity.KnowledgeChunk, error)
	Take() (*entity.KnowledgeChunk, error)
	Last() (*entity.KnowledgeChunk, error)
	Find() ([]*entity.KnowledgeChunk, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.KnowledgeChunk, err error)
	FindInBatches(result *[]*entity.KnowledgeChunk, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.KnowledgeChunk) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKnowledgeChunkDo
	Assign(attrs ...field.AssignExpr) IKnowledgeChunkDo
	Joins(fields ...field.RelationField) IKnowledgeChunkDo
	Preload(fields ...field.RelationField) IKnowledgeChunkDo
	FirstOrInit() (*entity.KnowledgeChunk, error)
	FirstOrCreate() (*entity.KnowledgeChunk, error)
	FindByPage(offset int, limit int) (result []*entity.KnowledgeChunk, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKnowledgeChunkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k knowledgeChunkDo) Debug() IKnowledgeChunkDo {
	return k.withDO(k.DO.Debug())
}

func (k knowledgeChunkDo) WithContext(ctx context.Context) IKnowledgeChunkDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k knowledgeChunkDo) ReadDB() IKnowledgeChunkDo {
	return k.Clauses(dbresolver.Read)
}

func (k knowledgeChunkDo) WriteDB() IKnowledgeChunkDo {
	return k.Clauses(dbresolver.Write)
}

func (k knowledgeChunkDo) Session(config *gorm.Session) IKnowledgeChunkDo {
	return k.withDO(k.DO.Session(config))
}

func (k knowledgeChunkDo) Clauses(conds ...clause.Expression) IKnowledgeChunkDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k knowledgeChunkDo) Returning(value interface{}, columns ...string) IKnowledgeChunkDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k knowledgeChunkDo) Not(conds ...gen.Condition) IKnowledgeChunkDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k knowledgeChunkDo) Or(conds ...gen.Condition) IKnowledgeChunkDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k knowledgeChunkDo) Select(conds ...field.Expr) IKnowledgeChunkDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k knowledgeChunkDo) Where(conds ...gen.Condition) IKnowledgeChunkDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k knowledgeChunkDo) Order(conds ...field.Expr) IKnowledgeChunkDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k knowledgeChunkDo) Distinct(cols ...field.Expr) IKnowledgeChunkDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k knowledgeChunkDo) Omit(cols ...field.Expr) IKnowledgeChunkDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k knowledgeChunkDo) Join(table schema.Tabler, on ...field.Expr) IKnowledgeChunkDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k knowledgeChunkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKnowledgeChunkDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k knowledgeChunkDo) RightJoin(table schema.Tabler, on ...field.Expr) IKnowledgeChunkDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k knowledgeChunkDo) Group(cols ...field.Expr) IKnowledgeChunkDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k knowledgeChunkDo) Having(conds ...gen.Condition) IKnowledgeChunkDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k knowledgeChunkDo) Limit(limit int) IKnowledgeChunkDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k knowledgeChunkDo) Offset(offset int) IKnowledgeChunkDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k knowledgeChunkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKnowledgeChunkDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k knowledgeChunkDo) Unscoped() IKnowledgeChunkDo {
	return k.withDO(k.DO.Unscoped())
}

func (k knowledgeChunkDo) Create(values ...*entity.KnowledgeChunk) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k knowledgeChunkDo) CreateInBatches(values []*entity.KnowledgeChunk, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k knowledgeChunkDo) Save(values ...*entity.KnowledgeChunk) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k knowledgeChunkDo) First() (*entity.KnowledgeChunk, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeChunk), nil
	}
}

func (k knowledgeChunkDo) Take() (*entity.KnowledgeChunk, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeChunk), nil
	}
}

func (k knowledgeChunkDo) Last() (*entity.KnowledgeChunk, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeChunk), nil
	}
}

func (k knowledgeChunkDo) Find() ([]*entity.KnowledgeChunk, error) {
	result, err := k.DO.Find()
	return result.([]*entity.KnowledgeChunk), err
}

func (k knowledgeChunkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.KnowledgeChunk, err error) {
	buf := make([]*entity.KnowledgeChunk, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k knowledgeChunkDo) FindInBatches(result *[]*entity.KnowledgeChunk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k knowledgeChunkDo) Attrs(attrs ...field.AssignExpr) IKnowledgeChunkDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k knowledgeChunkDo) Assign(attrs ...field.AssignExpr) IKnowledgeChunkDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k knowledgeChunkDo) Joins(fields ...field.RelationField) IKnowledgeChunkDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k knowledgeChunkDo) Preload(fields ...field.RelationField) IKnowledgeChunkDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k knowledgeChunkDo) FirstOrInit() (*entity.KnowledgeChunk, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeChunk), nil
	}
}

func (k knowledgeChunkDo) FirstOrCreate() (*entity.KnowledgeChunk, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeChunk), nil
	}
}

func (k knowledgeChunkDo) FindByPage(offset int, limit int) (result []*entity.KnowledgeChunk, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k knowledgeChunkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k knowledgeChunkDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k knowledgeChunkDo) Delete(models ...*entity.KnowledgeChunk) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *knowledgeChunkDo) withDO(do gen.Dao) *knowledgeChunkDo {
	k.DO = *do.(*gen.DO)
	return k
}
