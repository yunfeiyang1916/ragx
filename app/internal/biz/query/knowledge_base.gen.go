// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ragx/app/internal/biz/entity"
)

func newKnowledgeBase(db *gorm.DB, opts ...gen.DOOption) knowledgeBase {
	_knowledgeBase := knowledgeBase{}

	_knowledgeBase.knowledgeBaseDo.UseDB(db, opts...)
	_knowledgeBase.knowledgeBaseDo.UseModel(&entity.KnowledgeBase{})

	tableName := _knowledgeBase.knowledgeBaseDo.TableName()
	_knowledgeBase.ALL = field.NewAsterisk(tableName)
	_knowledgeBase.ID = field.NewInt64(tableName, "id")
	_knowledgeBase.Name = field.NewString(tableName, "name")
	_knowledgeBase.Description = field.NewString(tableName, "description")
	_knowledgeBase.Category = field.NewString(tableName, "category")
	_knowledgeBase.Status = field.NewInt32(tableName, "status")
	_knowledgeBase.CreateTime = field.NewTime(tableName, "create_time")
	_knowledgeBase.UpdateTime = field.NewTime(tableName, "update_time")

	_knowledgeBase.fillFieldMap()

	return _knowledgeBase
}

type knowledgeBase struct {
	knowledgeBaseDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String
	Description field.String
	Category    field.String
	Status      field.Int32
	CreateTime  field.Time
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (k knowledgeBase) Table(newTableName string) *knowledgeBase {
	k.knowledgeBaseDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k knowledgeBase) As(alias string) *knowledgeBase {
	k.knowledgeBaseDo.DO = *(k.knowledgeBaseDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *knowledgeBase) updateTableName(table string) *knowledgeBase {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt64(table, "id")
	k.Name = field.NewString(table, "name")
	k.Description = field.NewString(table, "description")
	k.Category = field.NewString(table, "category")
	k.Status = field.NewInt32(table, "status")
	k.CreateTime = field.NewTime(table, "create_time")
	k.UpdateTime = field.NewTime(table, "update_time")

	k.fillFieldMap()

	return k
}

func (k *knowledgeBase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *knowledgeBase) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 7)
	k.fieldMap["id"] = k.ID
	k.fieldMap["name"] = k.Name
	k.fieldMap["description"] = k.Description
	k.fieldMap["category"] = k.Category
	k.fieldMap["status"] = k.Status
	k.fieldMap["create_time"] = k.CreateTime
	k.fieldMap["update_time"] = k.UpdateTime
}

func (k knowledgeBase) clone(db *gorm.DB) knowledgeBase {
	k.knowledgeBaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k knowledgeBase) replaceDB(db *gorm.DB) knowledgeBase {
	k.knowledgeBaseDo.ReplaceDB(db)
	return k
}

type knowledgeBaseDo struct{ gen.DO }

type IKnowledgeBaseDo interface {
	gen.SubQuery
	Debug() IKnowledgeBaseDo
	WithContext(ctx context.Context) IKnowledgeBaseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IKnowledgeBaseDo
	WriteDB() IKnowledgeBaseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IKnowledgeBaseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IKnowledgeBaseDo
	Not(conds ...gen.Condition) IKnowledgeBaseDo
	Or(conds ...gen.Condition) IKnowledgeBaseDo
	Select(conds ...field.Expr) IKnowledgeBaseDo
	Where(conds ...gen.Condition) IKnowledgeBaseDo
	Order(conds ...field.Expr) IKnowledgeBaseDo
	Distinct(cols ...field.Expr) IKnowledgeBaseDo
	Omit(cols ...field.Expr) IKnowledgeBaseDo
	Join(table schema.Tabler, on ...field.Expr) IKnowledgeBaseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IKnowledgeBaseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IKnowledgeBaseDo
	Group(cols ...field.Expr) IKnowledgeBaseDo
	Having(conds ...gen.Condition) IKnowledgeBaseDo
	Limit(limit int) IKnowledgeBaseDo
	Offset(offset int) IKnowledgeBaseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IKnowledgeBaseDo
	Unscoped() IKnowledgeBaseDo
	Create(values ...*entity.KnowledgeBase) error
	CreateInBatches(values []*entity.KnowledgeBase, batchSize int) error
	Save(values ...*entity.KnowledgeBase) error
	First() (*entity.KnowledgeBase, error)
	Take() (*entity.KnowledgeBase, error)
	Last() (*entity.KnowledgeBase, error)
	Find() ([]*entity.KnowledgeBase, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.KnowledgeBase, err error)
	FindInBatches(result *[]*entity.KnowledgeBase, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.KnowledgeBase) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IKnowledgeBaseDo
	Assign(attrs ...field.AssignExpr) IKnowledgeBaseDo
	Joins(fields ...field.RelationField) IKnowledgeBaseDo
	Preload(fields ...field.RelationField) IKnowledgeBaseDo
	FirstOrInit() (*entity.KnowledgeBase, error)
	FirstOrCreate() (*entity.KnowledgeBase, error)
	FindByPage(offset int, limit int) (result []*entity.KnowledgeBase, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IKnowledgeBaseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k knowledgeBaseDo) Debug() IKnowledgeBaseDo {
	return k.withDO(k.DO.Debug())
}

func (k knowledgeBaseDo) WithContext(ctx context.Context) IKnowledgeBaseDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k knowledgeBaseDo) ReadDB() IKnowledgeBaseDo {
	return k.Clauses(dbresolver.Read)
}

func (k knowledgeBaseDo) WriteDB() IKnowledgeBaseDo {
	return k.Clauses(dbresolver.Write)
}

func (k knowledgeBaseDo) Session(config *gorm.Session) IKnowledgeBaseDo {
	return k.withDO(k.DO.Session(config))
}

func (k knowledgeBaseDo) Clauses(conds ...clause.Expression) IKnowledgeBaseDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k knowledgeBaseDo) Returning(value interface{}, columns ...string) IKnowledgeBaseDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k knowledgeBaseDo) Not(conds ...gen.Condition) IKnowledgeBaseDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k knowledgeBaseDo) Or(conds ...gen.Condition) IKnowledgeBaseDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k knowledgeBaseDo) Select(conds ...field.Expr) IKnowledgeBaseDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k knowledgeBaseDo) Where(conds ...gen.Condition) IKnowledgeBaseDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k knowledgeBaseDo) Order(conds ...field.Expr) IKnowledgeBaseDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k knowledgeBaseDo) Distinct(cols ...field.Expr) IKnowledgeBaseDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k knowledgeBaseDo) Omit(cols ...field.Expr) IKnowledgeBaseDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k knowledgeBaseDo) Join(table schema.Tabler, on ...field.Expr) IKnowledgeBaseDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k knowledgeBaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IKnowledgeBaseDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k knowledgeBaseDo) RightJoin(table schema.Tabler, on ...field.Expr) IKnowledgeBaseDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k knowledgeBaseDo) Group(cols ...field.Expr) IKnowledgeBaseDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k knowledgeBaseDo) Having(conds ...gen.Condition) IKnowledgeBaseDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k knowledgeBaseDo) Limit(limit int) IKnowledgeBaseDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k knowledgeBaseDo) Offset(offset int) IKnowledgeBaseDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k knowledgeBaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IKnowledgeBaseDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k knowledgeBaseDo) Unscoped() IKnowledgeBaseDo {
	return k.withDO(k.DO.Unscoped())
}

func (k knowledgeBaseDo) Create(values ...*entity.KnowledgeBase) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k knowledgeBaseDo) CreateInBatches(values []*entity.KnowledgeBase, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k knowledgeBaseDo) Save(values ...*entity.KnowledgeBase) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k knowledgeBaseDo) First() (*entity.KnowledgeBase, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeBase), nil
	}
}

func (k knowledgeBaseDo) Take() (*entity.KnowledgeBase, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeBase), nil
	}
}

func (k knowledgeBaseDo) Last() (*entity.KnowledgeBase, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeBase), nil
	}
}

func (k knowledgeBaseDo) Find() ([]*entity.KnowledgeBase, error) {
	result, err := k.DO.Find()
	return result.([]*entity.KnowledgeBase), err
}

func (k knowledgeBaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.KnowledgeBase, err error) {
	buf := make([]*entity.KnowledgeBase, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k knowledgeBaseDo) FindInBatches(result *[]*entity.KnowledgeBase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k knowledgeBaseDo) Attrs(attrs ...field.AssignExpr) IKnowledgeBaseDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k knowledgeBaseDo) Assign(attrs ...field.AssignExpr) IKnowledgeBaseDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k knowledgeBaseDo) Joins(fields ...field.RelationField) IKnowledgeBaseDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k knowledgeBaseDo) Preload(fields ...field.RelationField) IKnowledgeBaseDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k knowledgeBaseDo) FirstOrInit() (*entity.KnowledgeBase, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeBase), nil
	}
}

func (k knowledgeBaseDo) FirstOrCreate() (*entity.KnowledgeBase, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.KnowledgeBase), nil
	}
}

func (k knowledgeBaseDo) FindByPage(offset int, limit int) (result []*entity.KnowledgeBase, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k knowledgeBaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k knowledgeBaseDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k knowledgeBaseDo) Delete(models ...*entity.KnowledgeBase) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *knowledgeBaseDo) withDO(do gen.Dao) *knowledgeBaseDo {
	k.DO = *do.(*gen.DO)
	return k
}
