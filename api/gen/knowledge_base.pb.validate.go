// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: knowledge_base.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateKnowledgeBaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateKnowledgeBaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKnowledgeBaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateKnowledgeBaseRequestMultiError, or nil if none found.
func (m *CreateKnowledgeBaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKnowledgeBaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Category

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateKnowledgeBaseRequestMultiError(errors)
	}

	return nil
}

// CreateKnowledgeBaseRequestMultiError is an error wrapping multiple
// validation errors returned by CreateKnowledgeBaseRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateKnowledgeBaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKnowledgeBaseRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKnowledgeBaseRequestMultiError) AllErrors() []error { return m }

// CreateKnowledgeBaseRequestValidationError is the validation error returned
// by CreateKnowledgeBaseRequest.Validate if the designated constraints aren't met.
type CreateKnowledgeBaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKnowledgeBaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKnowledgeBaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKnowledgeBaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKnowledgeBaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKnowledgeBaseRequestValidationError) ErrorName() string {
	return "CreateKnowledgeBaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKnowledgeBaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKnowledgeBaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKnowledgeBaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKnowledgeBaseRequestValidationError{}

// Validate checks the field values on ListKnowledgeBaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKnowledgeBaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKnowledgeBaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKnowledgeBaseRequestMultiError, or nil if none found.
func (m *ListKnowledgeBaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKnowledgeBaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Category

	if len(errors) > 0 {
		return ListKnowledgeBaseRequestMultiError(errors)
	}

	return nil
}

// ListKnowledgeBaseRequestMultiError is an error wrapping multiple validation
// errors returned by ListKnowledgeBaseRequest.ValidateAll() if the designated
// constraints aren't met.
type ListKnowledgeBaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKnowledgeBaseRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKnowledgeBaseRequestMultiError) AllErrors() []error { return m }

// ListKnowledgeBaseRequestValidationError is the validation error returned by
// ListKnowledgeBaseRequest.Validate if the designated constraints aren't met.
type ListKnowledgeBaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKnowledgeBaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKnowledgeBaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKnowledgeBaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKnowledgeBaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKnowledgeBaseRequestValidationError) ErrorName() string {
	return "ListKnowledgeBaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKnowledgeBaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKnowledgeBaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKnowledgeBaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKnowledgeBaseRequestValidationError{}

// Validate checks the field values on ListKnowledgeBaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListKnowledgeBaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKnowledgeBaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKnowledgeBaseReplyMultiError, or nil if none found.
func (m *ListKnowledgeBaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKnowledgeBaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListKnowledgeBaseReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListKnowledgeBaseReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKnowledgeBaseReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListKnowledgeBaseReplyMultiError(errors)
	}

	return nil
}

// ListKnowledgeBaseReplyMultiError is an error wrapping multiple validation
// errors returned by ListKnowledgeBaseReply.ValidateAll() if the designated
// constraints aren't met.
type ListKnowledgeBaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKnowledgeBaseReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKnowledgeBaseReplyMultiError) AllErrors() []error { return m }

// ListKnowledgeBaseReplyValidationError is the validation error returned by
// ListKnowledgeBaseReply.Validate if the designated constraints aren't met.
type ListKnowledgeBaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKnowledgeBaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKnowledgeBaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKnowledgeBaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKnowledgeBaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKnowledgeBaseReplyValidationError) ErrorName() string {
	return "ListKnowledgeBaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListKnowledgeBaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKnowledgeBaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKnowledgeBaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKnowledgeBaseReplyValidationError{}

// Validate checks the field values on KnowledgeBase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KnowledgeBase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KnowledgeBase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KnowledgeBaseMultiError, or
// nil if none found.
func (m *KnowledgeBase) ValidateAll() error {
	return m.validate(true)
}

func (m *KnowledgeBase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Category

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KnowledgeBaseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KnowledgeBaseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KnowledgeBaseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KnowledgeBaseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KnowledgeBaseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KnowledgeBaseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KnowledgeBaseMultiError(errors)
	}

	return nil
}

// KnowledgeBaseMultiError is an error wrapping multiple validation errors
// returned by KnowledgeBase.ValidateAll() if the designated constraints
// aren't met.
type KnowledgeBaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KnowledgeBaseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KnowledgeBaseMultiError) AllErrors() []error { return m }

// KnowledgeBaseValidationError is the validation error returned by
// KnowledgeBase.Validate if the designated constraints aren't met.
type KnowledgeBaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KnowledgeBaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KnowledgeBaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KnowledgeBaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KnowledgeBaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KnowledgeBaseValidationError) ErrorName() string { return "KnowledgeBaseValidationError" }

// Error satisfies the builtin error interface
func (e KnowledgeBaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKnowledgeBase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KnowledgeBaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KnowledgeBaseValidationError{}
