// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: indexer.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IndexerService_UploadIndexer_FullMethodName = "/gen.IndexerService/UploadIndexer"
)

// IndexerServiceClient is the client API for IndexerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexerServiceClient interface {
	// 上传文件索引，定义成stream方式，这样就不会生成http.pb文件了，需要自己实现http请求
	UploadIndexer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadIndexerRequest, UploadIndexerReply], error)
}

type indexerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerServiceClient(cc grpc.ClientConnInterface) IndexerServiceClient {
	return &indexerServiceClient{cc}
}

func (c *indexerServiceClient) UploadIndexer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadIndexerRequest, UploadIndexerReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IndexerService_ServiceDesc.Streams[0], IndexerService_UploadIndexer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadIndexerRequest, UploadIndexerReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexerService_UploadIndexerClient = grpc.ClientStreamingClient[UploadIndexerRequest, UploadIndexerReply]

// IndexerServiceServer is the server API for IndexerService service.
// All implementations must embed UnimplementedIndexerServiceServer
// for forward compatibility.
type IndexerServiceServer interface {
	// 上传文件索引，定义成stream方式，这样就不会生成http.pb文件了，需要自己实现http请求
	UploadIndexer(grpc.ClientStreamingServer[UploadIndexerRequest, UploadIndexerReply]) error
	mustEmbedUnimplementedIndexerServiceServer()
}

// UnimplementedIndexerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndexerServiceServer struct{}

func (UnimplementedIndexerServiceServer) UploadIndexer(grpc.ClientStreamingServer[UploadIndexerRequest, UploadIndexerReply]) error {
	return status.Errorf(codes.Unimplemented, "method UploadIndexer not implemented")
}
func (UnimplementedIndexerServiceServer) mustEmbedUnimplementedIndexerServiceServer() {}
func (UnimplementedIndexerServiceServer) testEmbeddedByValue()                        {}

// UnsafeIndexerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServiceServer will
// result in compilation errors.
type UnsafeIndexerServiceServer interface {
	mustEmbedUnimplementedIndexerServiceServer()
}

func RegisterIndexerServiceServer(s grpc.ServiceRegistrar, srv IndexerServiceServer) {
	// If the following call pancis, it indicates UnimplementedIndexerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IndexerService_ServiceDesc, srv)
}

func _IndexerService_UploadIndexer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IndexerServiceServer).UploadIndexer(&grpc.GenericServerStream[UploadIndexerRequest, UploadIndexerReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexerService_UploadIndexerServer = grpc.ClientStreamingServer[UploadIndexerRequest, UploadIndexerReply]

// IndexerService_ServiceDesc is the grpc.ServiceDesc for IndexerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.IndexerService",
	HandlerType: (*IndexerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadIndexer",
			Handler:       _IndexerService_UploadIndexer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "indexer.proto",
}
