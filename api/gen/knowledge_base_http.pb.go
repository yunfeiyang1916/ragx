// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: knowledge_base.proto

package gen

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKnowledgeBaseServiceCreateKnowledgeBase = "/gen.KnowledgeBaseService/CreateKnowledgeBase"
const OperationKnowledgeBaseServiceDeleteKnowledgeBase = "/gen.KnowledgeBaseService/DeleteKnowledgeBase"
const OperationKnowledgeBaseServiceGetKnowledgeBase = "/gen.KnowledgeBaseService/GetKnowledgeBase"
const OperationKnowledgeBaseServiceListKnowledgeBase = "/gen.KnowledgeBaseService/ListKnowledgeBase"
const OperationKnowledgeBaseServiceUpdateKnowledgeBase = "/gen.KnowledgeBaseService/UpdateKnowledgeBase"

type KnowledgeBaseServiceHTTPServer interface {
	CreateKnowledgeBase(context.Context, *CreateKnowledgeBaseRequest) (*IDReply, error)
	DeleteKnowledgeBase(context.Context, *IDReply) (*IDReply, error)
	GetKnowledgeBase(context.Context, *IDReply) (*KnowledgeBase, error)
	ListKnowledgeBase(context.Context, *ListKnowledgeBaseRequest) (*ListKnowledgeBaseReply, error)
	UpdateKnowledgeBase(context.Context, *CreateKnowledgeBaseRequest) (*IDReply, error)
}

func RegisterKnowledgeBaseServiceHTTPServer(s *http.Server, srv KnowledgeBaseServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/kb", _KnowledgeBaseService_CreateKnowledgeBase0_HTTP_Handler(srv))
	r.PUT("/api/v1/kb/{id}", _KnowledgeBaseService_UpdateKnowledgeBase0_HTTP_Handler(srv))
	r.DELETE("/api/v1/kb/{id}", _KnowledgeBaseService_DeleteKnowledgeBase0_HTTP_Handler(srv))
	r.GET("/api/v1/kb/{id}", _KnowledgeBaseService_GetKnowledgeBase0_HTTP_Handler(srv))
	r.GET("/api/v1/kb", _KnowledgeBaseService_ListKnowledgeBase0_HTTP_Handler(srv))
}

func _KnowledgeBaseService_CreateKnowledgeBase0_HTTP_Handler(srv KnowledgeBaseServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateKnowledgeBaseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeBaseServiceCreateKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateKnowledgeBase(ctx, req.(*CreateKnowledgeBaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IDReply)
		return ctx.Result(200, reply)
	}
}

func _KnowledgeBaseService_UpdateKnowledgeBase0_HTTP_Handler(srv KnowledgeBaseServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateKnowledgeBaseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeBaseServiceUpdateKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateKnowledgeBase(ctx, req.(*CreateKnowledgeBaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IDReply)
		return ctx.Result(200, reply)
	}
}

func _KnowledgeBaseService_DeleteKnowledgeBase0_HTTP_Handler(srv KnowledgeBaseServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDReply
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeBaseServiceDeleteKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteKnowledgeBase(ctx, req.(*IDReply))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IDReply)
		return ctx.Result(200, reply)
	}
}

func _KnowledgeBaseService_GetKnowledgeBase0_HTTP_Handler(srv KnowledgeBaseServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IDReply
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeBaseServiceGetKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetKnowledgeBase(ctx, req.(*IDReply))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*KnowledgeBase)
		return ctx.Result(200, reply)
	}
}

func _KnowledgeBaseService_ListKnowledgeBase0_HTTP_Handler(srv KnowledgeBaseServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListKnowledgeBaseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeBaseServiceListKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListKnowledgeBase(ctx, req.(*ListKnowledgeBaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListKnowledgeBaseReply)
		return ctx.Result(200, reply)
	}
}

type KnowledgeBaseServiceHTTPClient interface {
	CreateKnowledgeBase(ctx context.Context, req *CreateKnowledgeBaseRequest, opts ...http.CallOption) (rsp *IDReply, err error)
	DeleteKnowledgeBase(ctx context.Context, req *IDReply, opts ...http.CallOption) (rsp *IDReply, err error)
	GetKnowledgeBase(ctx context.Context, req *IDReply, opts ...http.CallOption) (rsp *KnowledgeBase, err error)
	ListKnowledgeBase(ctx context.Context, req *ListKnowledgeBaseRequest, opts ...http.CallOption) (rsp *ListKnowledgeBaseReply, err error)
	UpdateKnowledgeBase(ctx context.Context, req *CreateKnowledgeBaseRequest, opts ...http.CallOption) (rsp *IDReply, err error)
}

type KnowledgeBaseServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewKnowledgeBaseServiceHTTPClient(client *http.Client) KnowledgeBaseServiceHTTPClient {
	return &KnowledgeBaseServiceHTTPClientImpl{client}
}

func (c *KnowledgeBaseServiceHTTPClientImpl) CreateKnowledgeBase(ctx context.Context, in *CreateKnowledgeBaseRequest, opts ...http.CallOption) (*IDReply, error) {
	var out IDReply
	pattern := "/api/v1/kb"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeBaseServiceCreateKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeBaseServiceHTTPClientImpl) DeleteKnowledgeBase(ctx context.Context, in *IDReply, opts ...http.CallOption) (*IDReply, error) {
	var out IDReply
	pattern := "/api/v1/kb/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeBaseServiceDeleteKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeBaseServiceHTTPClientImpl) GetKnowledgeBase(ctx context.Context, in *IDReply, opts ...http.CallOption) (*KnowledgeBase, error) {
	var out KnowledgeBase
	pattern := "/api/v1/kb/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeBaseServiceGetKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeBaseServiceHTTPClientImpl) ListKnowledgeBase(ctx context.Context, in *ListKnowledgeBaseRequest, opts ...http.CallOption) (*ListKnowledgeBaseReply, error) {
	var out ListKnowledgeBaseReply
	pattern := "/api/v1/kb"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeBaseServiceListKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeBaseServiceHTTPClientImpl) UpdateKnowledgeBase(ctx context.Context, in *CreateKnowledgeBaseRequest, opts ...http.CallOption) (*IDReply, error) {
	var out IDReply
	pattern := "/api/v1/kb/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeBaseServiceUpdateKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
